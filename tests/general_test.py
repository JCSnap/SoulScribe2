import os
from flask import Flask, request, jsonify
import openai
import re
import constants
import requests
import json
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt

# export OPENAI_API_KEY="YOUR_API_KEY"
# export SD_API_KEY="YOUR_API_KEY"

# PURPOSE OF THIS TEST
# This is to test for the output generated for the highlights when we feed different instruction prompts into
# gpt-4. All else remains constant (the summary etc.)
# The highlights would then be used to be turned fed into the Stable Diffusion model to generate art peices
# We are then able to compare the art generated by different instruction prompts
# The goal is to select the instruction prompt that generates the best art

# How to run?
# in your terminal, run the following command:
# python ./art_test.py
# Make sure that you are in the correct relative directory
# A window should pop up with the generated art pieces

openai.api_key = os.getenv("OPENAI_API_KEY")

instructions = constants.instructions
prompt = constants.summary
arts = []

for instruction in instructions:
    try:
        print("Sending request to OpenAI API...")
        completion = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": instruction},
                {"role": "user", "content": prompt}
            ]
        )
        print("Completed highlight generation")
        highlight = completion.choices[0].message.content
        print("Highlight: " + highlight)

        final_highlight = highlight.replace("Prompt: ", "")
        print(final_highlight)

        dreambooth = False

        if (dreambooth):
            url = "https://stablediffusionapi.com/api/v4/dreambooth"
            payload = json.dumps({
                "key": os.getenv("SD_API_KEY"),
                "model_id": "midjourney",
                "prompt": final_highlight,
                "negative_prompt": "painting, extra fingers, mutated hands, poorly drawn hands, poorly drawn face, deformed, ugly, blurry, bad anatomy, bad proportions, extra limbs, cloned face, skinny, glitchy, double torso, extra arms, extra hands, mangled fingers, missing lips, ugly face, distorted face, extra legs, anime",
                "width": "512",
                "height": "512",
                "samples": "1",
                "num_inference_steps": "30",
                "safety_checker": "no",
                "enhance_prompt": "no",
                "seed": None,
                "guidance_scale": 7.5,
                "multi_lingual": "no",
                "panorama": "no",
                "self_attention": "no",
                "upscale": "no",
                "tomesd": "yes",
                "use_karras_sigmas": "yes",
                "vae": None,
                "lora_strength": None,
                "scheduler": "UniPCMultistepScheduler",
                "webhook": None,
                "track_id": None
            })
        else:
            url = "https://stablediffusionapi.com/api/v3/text2img"
            payload = json.dumps({
                "key": os.getenv("SD_API_KEY"),
                "prompt": final_highlight,
                "width": "512",
                "height": "512",
                "samples": "1",
                "num_inference_steps": "20",
                "seed": None,
                "guidance_scale": 7.5,
                "safety_checker": "yes",
                "multi_lingual": "no",
                "panorama": "no",
                "self_attention": "no",
                "upscale": "no",
                "webhook": None,
                "track_id": None
            })

        headers = {
            'Content-Type': 'application/json'
        }

        print("Sending request to Stable Diffusion API...")
        response = requests.request(
            "POST", url, headers=headers, data=payload)
        print("Completed art generation")

        # Parse the JSON data
        json_data = json.loads(response.text)

        # Extract the URL
        print(json_data)
        art = json_data["output"][0]
        print(art)

        arts.append(art)
    except Exception as e:
        print(e)
        continue

num_arts = len(arts)
num_cols = 3
num_rows = num_arts // num_cols + 1

fig, axes = plt.subplots(num_rows, num_cols, figsize=(12, 8))

# Loop through the image URLs and display images
for i, url in enumerate(arts):
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))

    # Calculate the position in the grid
    row = i // num_cols
    col = i % num_cols

    # Display the image in the corresponding subplot
    axes[row, col].imshow(img)
    axes[row, col].axis('off')

# Remove empty subplots if the number of images is not a multiple of num_cols * num_rows
if num_arts % num_cols != 0:
    for i in range(num_arts, num_rows * num_cols):
        row = i // num_cols
        col = i % num_cols
        fig.delaxes(axes[row, col])

plt.tight_layout()
plt.show()
